import boto3

# Get the service resource.
dynamodb = boto3.resource('dynamodb')

# Create the DynamoDB table.
table = dynamodb.create_table(
    TableName='users',
    KeySchema=[
        {
            'AttributeName': 'username',
            'KeyType': 'HASH'
        },
        {
            'AttributeName': 'last_name',
            'KeyType': 'RANGE'
        }
    ],
    AttributeDefinitions=[
        {
            'AttributeName': 'username',
            'AttributeType': 'S'
        },
        {
            'AttributeName': 'last_name',
            'AttributeType': 'S'
        },
    ],
    ProvisionedThroughput={
        'ReadCapacityUnits': 5,
        'WriteCapacityUnits': 5
    }
)

# Wait until the table exists.
table.wait_until_exists()

# Print out some data about the table.
print(table.item_count)

dynamodb = boto3.resource('dynamodb')

# Instantiate a table resource object without actually
# creating a DynamoDB table. Note that the attributes of this table
# are lazy-loaded: a request is not made nor are the attribute
# values populated until the attributes
# on the table resource are accessed or its load() method is called.
table = dynamodb.Table('product_dy')

# Print out some data about the table.
# This will cause a request to be made to DynamoDB and its attribute
# values will be set based on the response.
print(table.creation_date_time)

table.put_item(
   Item={
        'username': 'janedoe',
        'first_name': 'Jane',
        'last_name': 'Doe',
        'age': 25,
        'account_type': 'standard_user',
    }
)


==================================================================================inserting items into dynamodb=========================================================================

def lambda_handler(event,context):
    
    dynamodb = boto3.resource('dynamodb')
    #table name
    table = dynamodb.Table('product1_dy')
    #inserting values into table
    response = table.put_item(
       Item= 
  {
    "name": "ML Crankarm",
    "number": "CA-6738",
    "color": "Blue"
  })
    return response
===========================================================================================================================================================================================

import json
import boto3
import time

athenaClient = boto3.client('athena')
client = boto3.client('s3')


def lambda_handler(event, context):
    
    responseS3 = client.get_object(
        Bucket='external-datalake-files',
        Key='product.json',
     )
    file_content = responseS3['Body'].read().decode('utf-8')
    print (file_content)
    return json.loads(file_content)

    print(responseAthena)
    response = athenaClient.get_query_results(
        QueryExecutionId='d27a1961-62c7-4aa9-860a-efd639679c6a'
    )
    
    print(json.dumps(response))
    
    s31=json.loads(file_content)
    athena_list = [x["Data"][2]['VarCharValue'] for x in response['ResultSet']['Rows']]
    s3_list=[y["number"] for y in s31 ]
   
    matched = [x for x in athena_list  if x in s3_list]
    print(matched)

dynamodb = boto3.resource('dynamodb')

table = dynamodb.Table('product1_dy')

response = table.query(
    KeyConditionExpression=Key('name').eq(1)
)

for i in response['Items']:
    print(i['name'], ":", i['number'])